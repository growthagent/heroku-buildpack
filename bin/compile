#!/usr/bin/env bash
# vim: filetype=sh
# bin/compile <build-dir> <cache-dir> <env-dir>
set -euo pipefail

BUILD_DIR=${1:-}
CACHE_DIR=${2:-}
ENV_DIR=${3:-}
BP_DIR=$(cd "$(dirname "${0:-}")"; cd ..; pwd)

indent() {
  sed -u 's/^/       /'
}

export ASDF_DIR="$BUILD_DIR/.heroku/asdf"
export ASDF_DATA_DIR="$ASDF_DIR"
ASDF_CACHE_DIR="$CACHE_DIR/asdf"
if [ -f "$BUILD_DIR/.tool-versions" ]; then
  ASDF_VERSION="$(awk -F ' ' '{ if (match($1, "asdf")) {print $2} }' "$BUILD_DIR/.tool-versions")"
fi
ASDF_VERSION=${ASDF_VERSION:-'0.8.0-rc1'}

mkdir -p "$ASDF_DIR"

# Copying from cache
if [ -d "$ASDF_CACHE_DIR" ]; then
  if [ -f "${ASDF_CACHE_DIR}/asdf.sh" -a -x "${ASDF_CACHE_DIR}/bin/asdf" ]; then
    echo "-----> Copying and sourcing asdf cache"
    cp -Trf "$ASDF_CACHE_DIR" "${ASDF_DIR}/"
    . "${ASDF_DIR}/asdf.sh"
  else
    echo "-----> Fresh state, missing scripts, or different versions in asdf cache; removing"
    rm -rf "$ASDF_CACHE_DIR"
    mkdir -p "$ASDF_CACHE_DIR"
  fi
else
  mkdir -p "$ASDF_CACHE_DIR"
fi

# if missing/fresh or we sourced asdfâ€™s shell script, and we donâ€™t have an asdf, time to (re)install
if [ -z "$(command -v "asdf")" ]  || [ "$(asdf --version | awk -F '-' '{print $1}')" != "v${ASDF_VERSION}" ]; then
  echo "-----> Installing asdf v${ASDF_VERSION}"
  rm -rf "$ASDF_DIR"
  git clone --quiet --depth=1 https://github.com/asdf-vm/asdf.git "$ASDF_DIR" --branch "v${ASDF_VERSION}" | indent
  . "$ASDF_DIR/asdf.sh"
else
  echo "-----> Using asdf v${ASDF_VERSION}"
  asdf reshim
fi

if ! [ -f "\$PWD/.tool-versions" ] && [ -f "$BUILD_DIR/.tool-versions" ]; then
  echo "cp .tool-versions" | indent
  cp "$BUILD_DIR/.tool-versions" .
fi

# ([plugin]=repo)
declare -r -A asdf_plugins=(
  [dhall]=""
  [purescript-zephyr]="https://github.com/instateam/asdf-purescript-zephyr.git"
)

for plugin in "${!asdf_plugins[@]}"; do
  if [ -z "$(asdf plugin list | grep -x "$plugin")" ]; then
    echo "-----> Adding asdf $plugin"
    repo="${asdf_plugins[$plugin]}"
    asdf plugin add "$plugin" "$repo" | indent
  else
    echo "-----> Updating asdf plugin $plugin"
    asdf plugin update "$plugin" | indent
  fi
done

echo "-----> Install asdf plugins"
asdf install | indent

echo "-----> Coping asdf over to cache"
cp -Trf "$ASDF_DIR" "${ASDF_CACHE_DIR}/"
# we need to reshim later as the paths are pointing to the temp build dir
rm -rf "${ASDF_CACHE_DIR}/shims"

echo "-----> Creating asdf .profile.d script"
ASDF_REL_DIR="$(realpath --relative-to="$BUILD_DIR" "$ASDF_DIR")"
mkdir -p "$BUILD_DIR/.profile.d"
cat << EOF > "$BUILD_DIR/.profile.d/asdf.sh"
# add asdf dirs to \$PATH
export ASDF_DIR="\$HOME/${ASDF_REL_DIR}"
export ASDF_DATA_DIR="\$HOME/${ASDF_REL_DIR}"
export PATH="\$HOME/${ASDF_REL_DIR}/shims:\$HOME/${ASDF_REL_DIR}/bin:\$PATH"

. "\$HOME/${ASDF_REL_DIR}/asdf.sh"

# verify asdf is installed and reinstall missing plugins
if ! command -v asdf > /dev/null 2>&1; then
  echo "asdf not installed ðŸ¤”"
  exit 1
fi

# bash completions for debugging
[ -z "\$BASH_VERSION" ] && . \$HOME/${ASDF_REL_DIR}/completions/asdf.bash

asdf install
asdf reshim
EOF


if [ -w "$BP_DIR" ]; then
  echo "-----> Creating asdf export script"
  cat << EOF > "${BP_DIR}/export"
export ASDF_DIR="${ASDF_DIR}"
export ASDF_DATA_DIR="${ASDF_DIR}"
export PATH="${ASDF_DIR}/shims:${ASDF_DIR}/bin:\$PATH"
. "${ASDF_DIR}/asdf.sh"
EOF
fi

exit 0
