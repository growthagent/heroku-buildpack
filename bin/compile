#!/usr/bin/env bash
# vim: filetype=sh
# bin/compile <build-dir> <cache-dir> <env-dir>
set -euo pipefail

BUILD_DIR=${1:-}
CACHE_DIR=${2:-}
ENV_DIR=${3:-}
BP_DIR=$(cd "$(dirname "${0:-}")"; cd ..; pwd)

indent() {
  sed -u 's/^/       /'
}

declare -i ASDF_PLUGIN_VERSIONS_TO_KEEP=4

export ASDF_DIR="$PWD/asdf"
export ASDF_DATA_DIR="$ASDF_DIR"
ASDF_CACHE_DIR="$CACHE_DIR/asdf"
if [ -f "$BUILD_DIR/.tool-versions" ]; then
  ASDF_VERSION="$(awk -F ' ' '{ if (match($1, "asdf")) {print $2} }' "$BUILD_DIR/.tool-versions")"
fi
ASDF_VERSION=${ASDF_VERSION:-'0.8.0'}

# directory to export the binaries
ASDF_INSTALLS="$BUILD_DIR/.heroku/asdf/"
mkdir -p "$ASDF_INSTALLS"


# Copying from cache
if [ -d "$ASDF_CACHE_DIR" ]; then
  if [ -f "${ASDF_CACHE_DIR}/asdf.sh" -a -x "${ASDF_CACHE_DIR}/bin/asdf" ]; then
    echo "-----> Copying and sourcing asdf cache"
    cp -Trf "$ASDF_CACHE_DIR" "${ASDF_DIR}/"
    . "${ASDF_DIR}/asdf.sh"
  else
    echo "-----> Fresh state, missing scripts, or different versions in asdf cache; removing"
    rm -rf "$ASDF_CACHE_DIR"
    mkdir -p "$ASDF_CACHE_DIR"
  fi
else
  mkdir -p "$ASDF_CACHE_DIR"
fi

# if missing/fresh or we sourced asdf’s shell script, and we don’t have an asdf, time to (re)install
if [ -z "$(command -v "asdf")" ]  || [ "$(asdf --version | awk -F '-' '{print $1}')" != "v${ASDF_VERSION}" ]; then
  echo "-----> Installing asdf v${ASDF_VERSION}"
  rm -rf "$ASDF_DIR"
  git clone --quiet --depth=1 https://github.com/asdf-vm/asdf.git "$ASDF_DIR" --branch "v${ASDF_VERSION}" | indent
  . "$ASDF_DIR/asdf.sh"
else
  echo "-----> Using asdf v${ASDF_VERSION}"
  asdf reshim | indent
fi

if ! [ -f "\$PWD/.tool-versions" ] && [ -f "$BUILD_DIR/.tool-versions" ]; then
  echo "-----> cp .tool-versions"
  cp "$BUILD_DIR/.tool-versions" .
fi

# ([plugin]=repo)
declare -r -A asdf_plugins=(
  [dhall]=""
  [purescript-zephyr]="https://github.com/instateam/asdf-purescript-zephyr.git"
)

for plugin in "${!asdf_plugins[@]}"; do
  if [ -z "$(asdf plugin list | grep -x "$plugin")" ]; then
    echo "-----> Adding asdf $plugin"
    repo="${asdf_plugins[$plugin]}"
    asdf plugin add "$plugin" "$repo" | indent
  else
    echo "-----> Updating asdf plugin $plugin"
    asdf plugin update "$plugin" | indent
  fi
done

echo "-----> Install asdf plugins"
asdf install | indent

echo "-----> Uninstall old asdf plugins versions"
for plugin in "${!asdf_plugins[@]}"; do
  # keeping the last 3 versions
  for version in $(asdf list "$plugin" | head -n "$(($ASDF_PLUGIN_VERSIONS_TO_KEEP*-1))" | xargs); do
    echo "Removing $plugin $version" | indent
    asdf uninstall "$plugin" "${version}" | indent
  done
done


echo "-----> Copying binaries from asdf and building \$PATH"
ASDF_INSTALLS_REL_TO_BUILD="$(realpath --relative-to="$BUILD_DIR" "$ASDF_INSTALLS")"
ASDF_PROFILE_PATHS=""
ASDF_BUILD_PATHS=""
for plugin in "${!asdf_plugins[@]}"; do
  new_path="$ASDF_INSTALLS/$plugin"
  cp -Trf "$(asdf where "$plugin")/" "$new_path" | indent

  rel_path="\$HOME/$ASDF_INSTALLS_REL_TO_BUILD/$plugin/bin"
  if [ -z "$ASDF_PROFILE_PATHS" ]; then
    ASDF_PROFILE_PATHS=$rel_path
  else
    ASDF_PROFILE_PATHS="$rel_path:$ASDF_PROFILE_PATHS"
  fi

  if [ -z "$ASDF_BUILD_PATHS" ]; then
    ASDF_BUILD_PATHS="$new_path/bin"
  else
    ASDF_BUILD_PATHS="$new_path/bin:$ASDF_BUILD_PATHS"
  fi
done

echo "-----> Cleaning up and caching asdf"
# we need to reshim later as the paths are pointing to the temp build dir
rm -rf "${ASDF_DIR}/shims" | indent
cp -Trf "$ASDF_DIR" "${ASDF_CACHE_DIR}/" | indent
rm -rf "${ASDF_DIR}" | indent

echo "-----> Creating asdf .profile.d script"
mkdir -p "$BUILD_DIR/.profile.d" | indent
cat << EOF > "$BUILD_DIR/.profile.d/asdf.sh"
# add asdf binaries to \$PATH
export PATH="$ASDF_PROFILE_PATHS:\$PATH"
EOF


if [ -w "$BP_DIR" ]; then
  echo "-----> Creating asdf export script"
  cat << EOF > "${BP_DIR}/export"
export PATH="${ASDF_BUILD_PATHS}:\$PATH"
EOF
fi

exit 0
